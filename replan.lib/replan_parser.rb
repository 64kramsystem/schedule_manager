#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require 'ostruct'

  require_relative 'replan_lexer'

class ReplanParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 36)
  attr_accessor :v_f, :v_f_time, :v_s, :v_u, :v_interval, :v_next

  def parse(input)
    scan_str(input)

    OpenStruct.new(
      fixed:      !self.v_f.nil?,
      fixed_time: self.v_f_time,
      skip:       !self.v_s.nil?,
      update:     !self.v_u.nil?,
      interval:   self.v_interval,
      next:       self.v_next,
    )
  end

  private

  # Assign to self.<var>, checking that it_s not already assigned.
  #
  def checked_assign(var, value)
    self.send(var).nil? ?
      self.send("#{var}=", value) :
      raise("Option '#{var}' is already assigned: #{self.send(var)}")
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,     2,    11,    12,    13,    16,    10,     3,    11,    12,
     5,     7,    17,    18,    13,    19,    20,    21 ]

racc_action_check = [
     5,     0,     5,     5,     5,     8,     8,     1,     8,     8,
     2,     3,    10,    13,    16,    18,    19,    20 ]

racc_action_pointer = [
    -1,     7,     7,    11,   nil,    -4,   nil,   nil,     2,   nil,
     7,   nil,   nil,    10,   nil,   nil,     6,   nil,     6,    13,
     9,   nil ]

racc_action_default = [
   -12,   -12,   -12,   -12,    -1,   -12,    -3,    22,   -12,    -5,
    -6,    -8,    -9,   -10,    -2,    -4,   -12,    -7,   -12,   -12,
   -12,   -11 ]

racc_goto_table = [
     6,     9,     1,     4,    15,     8,    14 ]

racc_goto_check = [
     4,     5,     1,     2,     5,     3,     4 ]

racc_goto_pointer = [
   nil,     2,     1,     0,    -2,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 11, :_reduce_none,
  3, 12, :_reduce_none,
  1, 12, :_reduce_none,
  2, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 15, :_reduce_6,
  2, 15, :_reduce_7,
  1, 15, :_reduce_8,
  1, 15, :_reduce_9,
  2, 14, :_reduce_10,
  6, 14, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :REPLAN => 2,
  :WHITESPACE => 3,
  :F => 4,
  :TIME => 5,
  :S => 6,
  :U => 7,
  :INTERVAL => 8,
  :IN => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "REPLAN",
  "WHITESPACE",
  "F",
  "TIME",
  "S",
  "U",
  "INTERVAL",
  "IN",
  "$start",
  "expression",
  "options_r",
  "options",
  "period",
  "option" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_6(val, _values, result)
     checked_assign(:v_f, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_7(val, _values, result)
     checked_assign(:v_f, val[0]); checked_assign(:v_f_time, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_8(val, _values, result)
     checked_assign(:v_s, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_9(val, _values, result)
     checked_assign(:v_u, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_10(val, _values, result)
     self.v_interval = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_11(val, _values, result)
     self.v_interval = val[1]; self.v_next = val[5]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ReplanParser
