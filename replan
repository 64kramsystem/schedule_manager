#!/usr/bin/env ruby

require 'English'
require 'io/console'
require 'shellwords'
require 'tempfile'

require 'simple_scripting/argv'
require 'simple_scripting/configuration'

require_relative "#{File.basename(__FILE__)}.lib/replan_helper"

require_relative "#{File.basename(__FILE__)}.lib/relister"
require_relative "#{File.basename(__FILE__)}.lib/refixer"
require_relative "#{File.basename(__FILE__)}.lib/readder"
require_relative "#{File.basename(__FILE__)}.lib/replanner"
require_relative "#{File.basename(__FILE__)}.lib/retemplater"
require_relative "#{File.basename(__FILE__)}.lib/reworker"
require_relative "#{File.basename(__FILE__)}.lib/remover"

# Required only when comparing on update.
#
MERGE_PROGRAM = ENV["SCRIPTING_MERGE_PROGRAM"]

def to_i(bool)
  bool ? 1 : 0
end

def conditional_save(content, original_content, schedule_filename, archive_filename, compare: false, skips_only:)
  if content != original_content
    if compare
      merge_program = MERGE_PROGRAM || raise("$SCRIPTING_MERGE_PROGRAM is required when saving with compare")

      updated_file = Tempfile.new('new').path
      IO.write updated_file, content
      `#{merge_program} #{schedule_filename.shellescape} #{updated_file.shellescape}`

      puts "Press `y` to commit the changes!"
      confirm_commit = $stdin.getch
    else
      confirm_commit = "y"
    end

    if confirm_commit == "y"
      if !skips_only
        Remover.new.execute(schedule_filename, archive_filename, content)
      else
        IO.write(schedule_filename, content)
      end
    else
      puts "", "Changes not committed!"
    end
  else
    puts "No changes!"
  end
end

class Replan
  def list(schedule_filename, archive_filename, event_symbols, export: nil)
    current_content = IO.read(schedule_filename)
    archive_content = IO.read(archive_filename)

    # For listing purposes, the archive is not relevant, but the Relister default start takes care
    # of this.
    #
    complete_content = archive_content + "\n" + current_content

    Relister.new(event_symbols).execute(complete_content, export:)
  end

  def update(schedule_filename, archive_filename, template_filename:, compare:, skips_only:, debug:)
    content = IO.read(schedule_filename)
    original_content = content.dup

    content = Refixer.new.execute(content)
    content = Readder.new.execute(content)
    content = Retemplater.new(template_filename).execute(content) if template_filename && !skips_only
    content = Reworker.new.execute(content) if !skips_only
    content = Replanner.new.execute(content, debug:, skips_only:)

    conditional_save(content, original_content, schedule_filename, archive_filename, compare:, skips_only:)
  end
end

if __FILE__ == $PROGRAM_NAME
  options = SimpleScripting::Argv.decode(
    [ "-d", "--debug",         "Debug mode" ],
    [ "-c", "--compare",       "Compare before replacing the file, if there is any change, and ask confirmation" ],
    [ "-l", "--list",          "List mode (limited to #{Relister::DEFAULT_DAYS_LISTED} days)"],
    [ "-x", "--export START",  "Export mode: list with JSON output and no limits; start: YYYY-MM-DD"],
    [ "-s", "--skips-only",    "Only move skips/once-offs"],
    [ "-w", "--work",          "Compute the work hours for the current day"],
  ) || exit

  configuration = SimpleScripting::Configuration.load
  schedule_filename = configuration.schedule_filename.full_path
  event_symbols = configuration.event_symbols

  export = options[:export]
  list = !!options[:list]
  work = !!options[:work]
  debug = options.delete(:debug)

  if to_i(export) + to_i(work) + to_i(list) > 1
    raise "Only one of work/export/list modes is allowed"
  end

  begin
    if !!export
      raise "Export mode is not compatible with other options" if options.size > 1

      archive_filename = configuration.archive_filename.full_path
      export = Date.parse(export, '%F')

      Replan.new.list(schedule_filename, archive_filename, event_symbols, export:)
    elsif list
      raise "List mode is not compatible with other options" if options.size > 1

      archive_filename = configuration.archive_filename.full_path

      Replan.new.list(schedule_filename, archive_filename, event_symbols)
    else
      if work
        content = IO.read(schedule_filename)
        work_hours = Reworker.new.compute_first_date_work_hours(content)
        puts "Work hours: #{work_hours}"
      else
        archive_filename = configuration.archive_filename.full_path
        template_filename = configuration.template_filename&.full_path
        skips_only = !!options[:skips_only]
        compare = !!options[:compare]

        Replan.new.update(schedule_filename, archive_filename, template_filename:, compare:, skips_only:, debug:)
      end
    end
  rescue => error
    if debug
      raise error
    else
      puts "ERROR: #{error}"
      exit 1
    end
  end
end
